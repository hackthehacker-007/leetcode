class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
       long m=obstacleGrid.size();
        long n=obstacleGrid[0].size();
        
        if(obstacleGrid[m-1][n-1]==1)
            return 0;
        long** dp=new long*[m];
        
        for(int i=0;i<m;i++)
            dp[i]=new long[n];
        
        int k=1;
        
        for(int i=n-1;i>=0;i--)
        {
            if(obstacleGrid[m-1][i]==1)
            {
                k=0;
            }
            if(k==1)
            dp[m-1][i]=1;
            else
              dp[m-1][i]=0;  
            
        }
        k=1;
         for(int i=m-1;i>=0;i--)
        {
            if(obstacleGrid[i][n-1]==1)
            {
                k=0;
            }
            if(k==1)
            dp[i][n-1]=1;
            else
              dp[i][n-1]=0;  
            
        }
        
        
        
        
        for(int i=m-2;i>=0;i--){
            for(int j=n-2;j>=0;j--){
                
                if(obstacleGrid[i][j]==1)
                { dp[i][j]=0;
                  continue;
                }
        
                dp[i][j]=dp[i+1][j]+dp[i][j+1];
            }
        }
        
        return dp[0][0];
    }
};
